import React, { useState, useEffect } from "react";
import { useGetAllConversationQuery } from "../../../redux/features/message/message";
import { useGetAllUserQuery } from "../../../redux/features/auth/authApi";
import { TUser } from "../../../redux/features/auth/authSlice";

const AdminMessage = () => {
  const { data: conversationData } = useGetAllConversationQuery('');
  const saikat = conversationData?.data || [];
  console.log(saikat);

  const { data: user } = useGetAllUserQuery('');
  const allUsers = user?.data || []; 
  const users = allUsers.filter((allUser: any) => allUser.role === "user");

  console.log(users);

  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);
  const [newMessage, setNewMessage] = useState("");
  const [messages, setMessages] = useState<
    { id: string; sender: string; receiver: string; content: string; createdAt: string }[]
  >([]);

  useEffect(() => {
    if (selectedUserId) {
      const selectedConversation = saikat.find(
        (conv) => conv.user._id === selectedUserId
      );
      if (selectedConversation) {
        const conversationMessages = selectedConversation.messages || [];
        setMessages(conversationMessages);
      }
    }
  }, [selectedUserId, saikat]);

  const handleSend = () => {
    if (newMessage.trim() && selectedUserId) {
      const now = new Date().toISOString();
      const newMessageObject = {
        id: Date.now().toString(),
        sender: "admin",
        receiver: selectedUserId,
        content: newMessage,
        createdAt: now,
      };
      
      setMessages([...messages, newMessageObject]);
      setNewMessage("");

      // Update last message in conversations
      setConversations((prevConversations) =>
        prevConversations.map((conv) =>
          conv.user._id === selectedUserId
            ? {
                ...conv,
                lastMessage: { content: newMessage, createdAt: now },
                messages: [...conv.messages, newMessageObject],
              }
            : conv
        )
      );
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <div className="w-80 h-full border-r p-4 overflow-y-auto bg-white">
        <h2 className="text-2xl font-bold mb-6 text-center">All Users</h2>
        {users.map((user: TUser) => (
          <div
            key={user._id}
            onClick={() => setSelectedUserId(user._id)}
            className={`flex items-center gap-4 p-3 rounded-lg cursor-pointer mb-3 transition-all duration-300 ${
              selectedUserId === user._id ? "bg-blue-100" : "hover:bg-gray-100"
            }`}
          >
            <img
              src={user.profileImage || "/default-avatar.png"}
              alt="User"
              className="w-12 h-12 rounded-full object-cover"
            />
            <div className="flex-1">
              <div className="flex justify-between items-center">
                <p className="font-semibold text-gray-800 truncate">{user.name}</p>
                {saikat.find((conv) => conv.user._id === user._id)?.lastMessage?.createdAt && (
                  <span className="text-xs text-gray-400">
                    {new Date(
                      saikat.find((conv) => conv.user._id === user._id)?.lastMessage?.createdAt || ""
                    ).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
                  </span>
                )}
              </div>
              <p className="text-gray-500 text-sm truncate">
                {saikat.find((conv) => conv.user._id === user._id)?.lastMessage?.content || "No messages yet"}
              </p>
            </div>
          </div>
        ))}
      </div>

      {/* Chat Window */}
      <div className="flex-1 flex flex-col p-6 bg-gray-200">
        {selectedUserId ? (
          <>
            {/* Message list */}
            <div className="flex-1 overflow-y-auto space-y-4 pr-2">
              {messages.map((msg) => (
                <div
                  key={msg.id}
                  className={`flex ${msg.sender === "admin" ? "justify-end" : "justify-start"}`}
                >
                  <div className="flex items-end gap-2 max-w-sm">
                    {msg.sender !== "admin" && (
                      <img
                        src={users.find((user: TUser) => user._id === msg.sender)?.profileImage || "/default-avatar.png"}
                        alt="User"
                        className="w-8 h-8 rounded-full object-cover"
                      />
                    )}
                    <div
                      className={`p-3 rounded-2xl ${
                        msg.sender === "admin" ? "bg-blue-600 text-white" : "bg-gray-300 text-gray-800"
                      }`}
                    >
                      <div className="text-sm font-semibold mb-1">
                        {msg.sender === "admin" ? "Admin" : users.find((user: TUser) => user._id === msg.sender)?.name}
                      </div>
                      <div>{msg.content}</div>
                      <span className="text-xs text-gray-500 mt-1 block text-right">
                        {new Date(msg.createdAt).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* Message Input */}
            <div className="flex items-center gap-3 mt-4">
              <input
                type="text"
                placeholder="Type your message..."
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                onKeyDown={(e) => e.key === "Enter" && handleSend()}
                className="flex-1 px-4 py-3 border rounded-full focus:outline-none focus:ring-2 focus:ring-blue-400 bg-white shadow-sm"
              />
              <button
                onClick={handleSend}
                className="px-6 py-3 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700 transition-all"
              >
                Send
              </button>
            </div>
          </>
        ) : (
          <div className="flex items-center justify-center flex-1">
            <p className="text-gray-400 text-lg">Select a user to start chatting.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminMessage;
